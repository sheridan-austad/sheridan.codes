{"ast":null,"code":"var _jsxFileName = \"/home/sheridan95/phase-3/final-react-app/src/components/TodoForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoForm = () => {\n  _s();\n\n  const [todo, setTodo] = useState({\n    user_id: null,\n    name: \"\",\n    task: \"\",\n    completed: false\n  });\n  const history = useHistory();\n\n  const handleChange = e => {\n    setTodo({ ...todo,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if ([todo.username, todo.name, todo.task].some(val => val.trim() === \"\")) {\n      alert(\"You must fill in all the information please!\");\n    } // console.log(\"Fetching users\");\n    // fetch(`http://127.0.0.1:9393/users`)\n    // .then(resp => resp.json())\n    // .then(users => {\n    //     for(const [key, user] of Object.entries(users)){\n    //         console.log(`Comparing ${user.username} to ${todo.username}`)\n    //         if(user.username === todo.username){\n    //             console.log(\"MATCH!!\");\n    //             return user;\n    //         }\n    //     }\n    //     throw new Error(\"No Username match\");\n    // }).then(newTodoUser => {\n    //     console.log(`Creating new task for ${newTodoUser.username}`);\n    //     const newTodo = {\n    //         user_id: newTodoUser.id,\n    //         name: todo.name,\n    //         task: todo.task,\n    //         completed: todo.completed            \n    //     }\n    //     console.log(`Posting Task: user_id=${newTodo.user_id}\\nname=${newTodo.name}\\ntask=${newTodo.task}`)\n\n\n    fetch(`http://127.0.0.1:9393/todos`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTodo)\n    }).then(() => history.push(\"/todos/new\")).catch(() => alert(\"Invalid Username, please go to Profile to create a new one\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Create a new Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"User Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        name: \"username\",\n        value: todo.username,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 108\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Type (\\\"chore\\\", \\\"task\\\", etc.): \\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: todo.name,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 100\n      }, this), \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"task\",\n        children: \"Task: \\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        name: \"task\",\n        value: todo.task,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 100\n      }, this), \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"completed\",\n        children: \"Completed: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), \"\\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"checkbox\",\n        name: \"completed?\",\n        value: todo.completed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 106\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Create Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(TodoForm, \"hfNTQ5QrjKOTJvzczbwOcJcfaV4=\", false, function () {\n  return [useHistory];\n});\n\n_c = TodoForm;\nexport default TodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"sources":["/home/sheridan95/phase-3/final-react-app/src/components/TodoForm.js"],"names":["useState","useHistory","TodoForm","todo","setTodo","user_id","name","task","completed","history","handleChange","e","target","value","handleSubmit","preventDefault","username","some","val","trim","alert","fetch","method","headers","body","JSON","stringify","newTodo","then","push","catch"],"mappings":"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","sourcesContent":["import {useState} from \"react\"\nimport {useHistory} from \"react-router-dom\"\n\n\nconst TodoForm = () => {\n    const [todo, setTodo] = useState({\n        user_id: null,\n        name: \"\",\n        task: \"\",\n        completed: false\n    });\n\n    const history = useHistory()\n    \n    const handleChange = (e) => {\n        setTodo({\n            ...todo,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmit = e => {\n        e.preventDefault()\n        if ([todo.username, todo.name, todo.task].some(val => val.trim() === \"\")) {\n            alert(\"You must fill in all the information please!\")\n        }\n        \n        // console.log(\"Fetching users\");\n        // fetch(`http://127.0.0.1:9393/users`)\n        // .then(resp => resp.json())\n        // .then(users => {\n        //     for(const [key, user] of Object.entries(users)){\n        //         console.log(`Comparing ${user.username} to ${todo.username}`)\n        //         if(user.username === todo.username){\n        //             console.log(\"MATCH!!\");\n        //             return user;\n        //         }\n        //     }\n        //     throw new Error(\"No Username match\");\n        // }).then(newTodoUser => {\n\n        //     console.log(`Creating new task for ${newTodoUser.username}`);\n        //     const newTodo = {\n        //         user_id: newTodoUser.id,\n        //         name: todo.name,\n        //         task: todo.task,\n        //         completed: todo.completed            \n        //     }\n\n        //     console.log(`Posting Task: user_id=${newTodo.user_id}\\nname=${newTodo.name}\\ntask=${newTodo.task}`)\n            \n            fetch(`http://127.0.0.1:9393/todos`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(newTodo)\n            })\n            .then(() => history.push(\"/todos/new\"))\n            .catch(() => alert(\"Invalid Username, please go to Profile to create a new one\"))\n    }\n   \n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n            <h4>Create a new Todo List</h4>\n            &nbsp;\n            &nbsp;\n                <label htmlFor=\"username\">User Name:</label>\n            &nbsp;\n            &nbsp;\n                <input onChange={handleChange} type=\"text\" name=\"username\" value={todo.username} required/><br />\n               \n                <label htmlFor=\"name\">Type (\"chore\", \"task\", etc.): &nbsp;</label>\n                <input onChange={handleChange} type=\"text\" name=\"name\" value={todo.name} required/><br />\n                &nbsp;\n            &nbsp;\n                <label htmlFor=\"task\">Task: &nbsp;</label>\n                <input onChange={handleChange} type=\"text\" name=\"task\" value={todo.task} required/><br />\n                &nbsp;\n                &nbsp;\n                <label htmlFor=\"completed\">Completed: </label>\n                &nbsp;\n                &nbsp;\n                <input onChange={handleChange} type=\"checkbox\" name=\"completed?\" value={todo.completed}/><br />\n                <input type=\"submit\" value=\"Create Todo List\" />\n            </form>\n        </>\n    )\n}\nexport default TodoForm"]},"metadata":{},"sourceType":"module"}